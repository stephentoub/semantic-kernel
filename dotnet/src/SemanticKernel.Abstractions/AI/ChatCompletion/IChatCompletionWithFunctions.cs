// Copyright (c) Microsoft. All rights reserved.

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.SemanticKernel.Orchestration;

namespace Microsoft.SemanticKernel.AI.ChatCompletion;

/// <summary>
/// Interface for chat completion services with automatic function invocation based on the chat history.
/// </summary>
public interface IChatCompletionWithFunctions : IChatCompletion
{
    /// <summary>
    /// Get chat completion results for the prompt and settings and using the supplied functions.
    /// </summary>
    /// <param name="chat">The chat history context.</param>
    /// <param name="context">Context containing the functions to use for the chat completion and to use when invoking those functions.</param>
    /// <param name="requestSettings">Request settings for the completion API</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>List of different chat results generated by the remote model</returns>
    Task<IReadOnlyList<IChatResult>> GetChatCompletionsAsync(
        ChatHistory chat,
        SKContext context,
        AIRequestSettings? requestSettings = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Get chat streaming completion results for the prompt and settings.
    /// </summary>
    /// <param name="chat">The chat history context.</param>
    /// <param name="context">Context containing the functions to use for the chat completion and to use when invoking those functions.</param>
    /// <param name="requestSettings">Request settings for the completion API</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>AsyncEnumerable list of different streaming chat results generated by the remote model</returns>
    IAsyncEnumerable<IChatStreamingResult> GetStreamingChatCompletionsAsync(
        ChatHistory chat,
        SKContext context,
        AIRequestSettings? requestSettings = null,
        CancellationToken cancellationToken = default);
}
